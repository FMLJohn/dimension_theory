import order.monotone.basic
import order.with_bot
import data.fin.basic
import algebraic_geometry.prime_spectrum.basic
import ring_theory.ideal.basic

import .fin_lemmas

/--
`Œ±, Œ≤` preodered sets
--- 
General theory
- [x] `f : Œ± ‚Üí Œ≤` is strictly monotonic, then `krull_dim Œ± ‚â§ krull_dim Œ≤` by pushing out (using 
  `strict_chain.map`).
- [x] `f : Œ± ‚Üí Œ≤` is strictly comonotonic and surjective, then `krull_dim Œ≤ ‚â§ krull_dim Œ±` by 
  pulling back (using `strict_chain.comap`).
- [x] `height` makes sense for any preodered set.
- [x] `krull_dim` is equal to supremum of height.
- `krull_nat_dim` : works for "finite_dim" `[order_top (chain Œ±)]`, `Œ± ‚Üí ‚Ñï`.
- `krull_nat_dim = krull_dim` when finite dimensional
-------
Theory needs to take place in `Top, Ring, Module` Concerte
- (*) imply `R ‚ü∂ S` surjective homomorphism, then `dim S ‚â§ dim R`;
- need to show `height ùî≠ = krull_dim (localizaiton.at_prime ùî≠)`
- `coheight` probably doesn't make sense in general preorder
- `height ùî≠ + coheight ùî≠ ‚â§ krull_dim R`
Important but far away
- If `R` is noetherian and local, then `R` is finite dimensional.
-/

noncomputable theory

local notation `‚Ñï¬±‚àû` := with_bot (with_top ‚Ñï)

variables (Œ± Œ≤ : Type*)

section preorder

variables [preorder Œ±] [preorder Œ≤]

section strict_comono

variables {Œ± Œ≤}

/--
A function `f : Œ± ‚Üí Œ≤` is said to be strictly comonotonic (dual to strictly monotonic) 
if and only if `a < b` is implied by `f a < f b` for all `a, b : Œ≤`.
-/
def strict_comono (f : Œ± ‚Üí Œ≤) : Prop :=
‚àÄ ‚¶Éa b‚¶Ñ, f a < f b ‚Üí a < b

end strict_comono

/--
For a preordered set `(Œ±, <)`, a strict chain of `Œ±` of length `n` is a strictly monotonic function
`fin (n + 1) ‚Üí Œ±`, i.e. `a‚ÇÄ < a‚ÇÅ < ... < a‚Çô` with `a_i : Œ±`.
-/
structure strict_chain :=
(len : ‚Ñï)
(func : fin (len + 1) ‚Üí Œ±)
(strict_mono' : strict_mono func)

namespace strict_chain

instance : has_coe_to_fun (strict_chain Œ±) (Œª x, fin (x.len + 1) ‚Üí Œ±) :=
{ coe := Œª x, x.func }

/--
The induced ordering on `strict_chain Œ±` is by comparing length of strict chains.
-/
instance : has_le (strict_chain Œ±) :=
{ le := Œª p q, p.len ‚â§ q.len }

lemma le_def (p q : strict_chain Œ±) : p ‚â§ q ‚Üî p.len ‚â§ q.len := iff.rfl

instance : has_lt (strict_chain Œ±) :=
{ lt := Œª p q, p.len < q.len }

lemma lt_def (p q : strict_chain Œ±) : p < q ‚Üî p.len < q.len := iff.rfl

instance : preorder (strict_chain Œ±) :=
{ le := (‚â§),
  lt := (<),
  le_refl := Œª a, show a.len ‚â§ a.len, from le_refl _,
  le_trans := Œª a b c (h : a.len ‚â§ b.len) (h' : b.len ‚â§ c.len), show a.len ‚â§ c.len, from h.trans h',
  lt_iff_le_not_le := Œª a b, @lt_iff_le_not_le ‚Ñï _ a.len b.len }

instance [is_empty Œ±] : is_empty $ strict_chain Œ± :=
{ false := Œª p, @is_empty.elim Œ± (infer_instance : is_empty Œ±) (Œª _, false) (p 0) }

instance [inhabited Œ±] : inhabited $ strict_chain Œ± :=
{ default := ‚ü®0, Œª _, default, Œª _ _ h, (ne_of_lt h $ subsingleton.elim _ _).elim‚ü© }

instance [nonempty Œ±] : nonempty $ strict_chain Œ± :=
nonempty.intro ‚ü®0, Œª _, nonempty.some infer_instance, Œª _ _ h, (ne_of_lt h $ subsingleton.elim _ _).elim‚ü©

lemma top_len_unique [order_top (strict_chain Œ±)] (p : strict_chain Œ±) (hp : is_top p) :
  p.len = (‚ä§ : strict_chain Œ±).len :=
le_antisymm (@le_top (strict_chain Œ±) _ _ _) (hp ‚ä§)

lemma top_len_unique' (H1 H2 : order_top (strict_chain Œ±)) : H1.top.len = H2.top.len :=
le_antisymm (H2.le_top H1.top) (H1.le_top H2.top)

variables {Œ± Œ≤}

@[simps]
def reverse (i : strict_chain Œ±) : strict_chain Œ±·µí·µà :=
{ len := i.len,
  func := i ‚àò (has_sub.sub ‚ü®i.len, lt_add_one _‚ü©),
  strict_mono' := Œª j k h, i.strict_mono' begin
    rw [fin.lt_def, fin.sub_def, fin.sub_def],
    dsimp only,
    zify,
    rw [int.coe_nat_sub (by linarith [j.2] : j.1 ‚â§ i.len + 1), 
      int.coe_nat_sub (by linarith [k.2] : k.1 ‚â§ i.len + 1)],
    rw [int.coe_nat_add, int.coe_nat_one, add_sub_left_comm, int.add_mod_self_left,
      add_sub_left_comm, int.add_mod_self_left, int.mod_eq_of_lt, int.mod_eq_of_lt],
    { refine int.sub_lt_sub_left _ _, exact_mod_cast h, },
    { refine sub_nonneg_of_le _, linarith [j.2], },
    { rw [sub_eq_add_neg], 
      refine int.add_lt_add_left _ _,
      rw neg_lt,
      refine lt_of_lt_of_le neg_one_lt_zero _,
      norm_num, },
    { refine sub_nonneg_of_le _, linarith [k.2], },
    { rw [sub_eq_add_neg], 
      refine int.add_lt_add_left _ _,
      rw neg_lt,
      refine lt_of_lt_of_le neg_one_lt_zero _,
      norm_num, },
  end }

@[simps]
def cons (p : strict_chain Œ±) (a : Œ±) (h : a < p 0) : strict_chain Œ± :=
{ len := p.len + 1,
  func := fin.cons a p,
  strict_mono' := Œª i,
  begin 
    refine fin.cases _ _ i,
    { intros j, 
      refine fin.cases _ _ j,
      { intros r, rw lt_self_iff_false at r, cases r },
      { intros k hk, 
        rw [fin.cons_zero, fin.cons_succ], 
        exact lt_of_lt_of_le h (p.strict_mono'.monotone $ by norm_num), }, },
    { intros i' j,
      refine fin.cases _ _ j,
      { intros r, cases not_lt_of_lt r (fin.succ_pos i'), },
      { intros k hk, 
        rw [fin.cons_succ, fin.cons_succ], 
        refine p.strict_mono' _,
        rwa fin.succ_lt_succ_iff at hk, }, },
  end }

lemma cons_zero (p : strict_chain Œ±) (a : Œ±) (h : a < p 0) : p.cons a h 0 = a :=
by simp only [cons_func, fin.cons_zero]

@[simps]
def snoc (p : strict_chain Œ±) (a : Œ±) (h : p ‚ü®p.len, lt_add_one _‚ü© < a) : strict_chain Œ± :=
{ len := p.len + 1,
  func := fin.snoc p a,
  strict_mono' := Œª i j H, begin
    rw [fin.snoc, fin.snoc],
    by_cases h1 : j.1 < p.len + 1,
    { rw [dif_pos ((show i.1 < j.1, from H).trans h1), dif_pos h1, cast_eq, cast_eq],
      exact p.strict_mono' H },
    { rw [dif_neg h1, cast_eq],
      split_ifs with h2,
      { rw [cast_eq], 
        refine lt_of_le_of_lt (p.strict_mono'.monotone _) h,
        change i.1 ‚â§ p.len,
        linarith },
      { change i.1 < j.1 at H,
        have hi := i.2,
        have hj := j.2,
        push_neg at h2 h1,
        refine (ne_of_lt H _).elim,
        rw [show i.1 = p.len + 1, from _, show j.1 = p.len + 1, from _];
        linarith, }, },
  end }

lemma snoc_last (p : strict_chain Œ±) (a : Œ±) (h : p ‚ü®p.len, lt_add_one _‚ü© < a) :
  p.snoc a h ‚ü®p.len + 1, lt_add_one _‚ü© = a := 
by simp only [fin.snoc, lt_self_iff_false, not_false_iff, snoc_func, cast_eq, dif_neg]

/--
For two pre-ordered sets `Œ±, Œ≤`, if `f : Œ± ‚Üí Œ≤` is strictly monotonic, then a strict chain of `Œ±` 
can be pushed out to a strict chain of `Œ≤` by 
`a‚ÇÄ < a‚ÇÅ < ... < a‚Çô ‚Ü¶ f a‚ÇÄ < f a‚ÇÅ < ... < f a‚Çô`
-/
@[simps]
def map (p : strict_chain Œ±) (f : Œ± ‚Üí Œ≤) (hf : strict_mono f) : strict_chain Œ≤ :=
{ len := p.len,
  func := f.comp p,
  strict_mono' := hf.comp p.strict_mono' }

/--
For two pre-ordered sets `Œ±, Œ≤`, if `f : Œ± ‚Üí Œ≤` is surjective and strictly monotonic, then a strict 
chain of `Œ≤` can be pulled back to a strict chain of `Œ±` by 
`b‚ÇÄ < b‚ÇÅ < ... < b‚Çô ‚Ü¶ f‚Åª¬π b‚ÇÄ < f‚Åª¬π b‚ÇÅ < ... < f‚Åª¬π b‚Çô` where `f‚Åª¬π b·µ¢` is an arbitrary element in the
preimage of `f‚Åª¬π {b·µ¢}`.
-/
@[simps]
def comap (p : strict_chain Œ≤) (f : Œ± ‚Üí Œ≤) (hf1 : strict_comono f) (hf2 : function.surjective f) :
  strict_chain Œ± :=
{ len := p.len,
  func := Œª i, (hf2 (p i)).some,
  strict_mono' := Œª i j h, hf1 (by simpa only [(hf2 _).some_spec] using p.strict_mono' h) }

variable (Œ±)

lemma exists_len_gt_of_infinite_dim [no_top_order (strict_chain Œ±)] [nonempty Œ±] (n : ‚Ñï) : 
  ‚àÉ (p : strict_chain Œ±), n < p.len :=
begin
  haveI : inhabited Œ± := classical.inhabited_of_nonempty infer_instance,
  induction n with n ih,
  { obtain ‚ü®p, hp‚ü© := no_top_order.exists_not_le (default : strict_chain Œ±),
    refine ‚ü®p, lt_of_not_le hp‚ü©, },
  { rcases ih with ‚ü®p, hp‚ü©,
    rcases no_top_order.exists_not_le p with ‚ü®q, hq‚ü©,
    dsimp [le_def, not_le, nat.succ_eq_add_one] at *,
    exact ‚ü®q, by linarith‚ü©, },
end

end strict_chain

/--
Krull dimension of a pre-ordered set `Œ±` is the supremum of lengths of all strict chains of `Œ±`.
-/
@[reducible] def krull_dim : ‚Ñï¬±‚àû := ‚®Ü (p : strict_chain Œ±), p.len

variables {Œ±}

/--
Height of an element `a` of a pre-ordered set `Œ±` is the Krull dimension of the subset `(-‚àû, a]`
-/
@[reducible] def height (a : Œ±) : ‚Ñï¬±‚àû := krull_dim (set.Iic a)

/--
Coheight of an element `a` of a pre-ordered set `Œ±` is the Krull dimension of the subset `[a, +‚àû)`
-/
@[reducible] def coheight (a : Œ±) : ‚Ñï¬±‚àû := krull_dim (set.Ici a)

variable (Œ±)

lemma krull_dim_eq_bot_of_is_empty [is_empty Œ±] : krull_dim Œ± = ‚ä• :=
with_bot.csupr_empty _

lemma krull_dim_eq_top_of_no_top_order [nonempty Œ±] [no_top_order (strict_chain Œ±)] : 
  krull_dim Œ± = ‚ä§ :=
le_antisymm le_top $ le_Sup_iff.mpr $ Œª m hm, match m, hm with
| ‚ä•, hm := false.elim begin 
  haveI : inhabited Œ± := classical.inhabited_of_nonempty infer_instance,
  exact not_le_of_lt (with_bot.bot_lt_coe _ : ‚ä• < (0 : ‚Ñï¬±‚àû)) 
    (hm ‚ü®‚ü®0, Œª _, default, Œª _ _ h, ((ne_of_lt h) $ subsingleton.elim _ _).elim‚ü©, rfl‚ü©),
end
| some ‚ä§, hm := le_refl _ 
| some (some m), hm := begin 
  rw mem_upper_bounds at hm,
  obtain ‚ü®p, hp‚ü© := strict_chain.exists_len_gt_of_infinite_dim Œ± m,
  specialize hm p.len ‚ü®p, rfl‚ü©,
  refine (not_lt_of_le hm _).elim,
  erw [with_bot.some_eq_coe, with_bot.coe_lt_coe, with_top.some_eq_coe, with_top.coe_lt_coe],
  assumption,
end
end

lemma krull_dim_eq_len_of_order_top [order_top (strict_chain Œ±)] :
  krull_dim Œ± = (‚ä§ : strict_chain Œ±).len :=
le_antisymm (supr_le $ Œª i, with_bot.coe_le_coe.mpr $ with_top.coe_le_coe.mpr $ 
    order_top.le_top i) (le_Sup ‚ü®_, rfl‚ü©)

lemma krull_dim_eq_len_of_order_top' [order_top (strict_chain Œ±)] 
  (q : strict_chain Œ±) (h : is_top q) :
  krull_dim Œ± = q.len :=
(krull_dim_eq_len_of_order_top Œ±).trans $ strict_chain.top_len_unique Œ± _ h ‚ñ∏ rfl

variables {Œ± Œ≤}

lemma krull_dim_eq_len_of_is_top [order_top (strict_chain Œ±)] (p : strict_chain Œ±) (hp : is_top p) :
  krull_dim Œ± = p.len :=
by rw [krull_dim_eq_len_of_order_top, (strict_chain.top_len_unique _ p hp).symm]

lemma no_top_order_of_strict_mono (f : Œ± ‚Üí Œ≤) (hf : strict_mono f) [no_top_order (strict_chain Œ±)]
  [nonempty Œ±]: (no_top_order (strict_chain Œ≤)) :=
{ exists_not_le := Œª smb, let ‚ü®p, hp‚ü© := (strict_chain.exists_len_gt_of_infinite_dim Œ± smb.len) in 
    ‚ü®p.map f hf, not_le_of_lt hp‚ü© }

lemma krull_dim_le_of_strict_mono (f : Œ± ‚Üí Œ≤) (hf : strict_mono f) : krull_dim Œ± ‚â§ krull_dim Œ≤ :=
supr_le $ Œª p, le_Sup ‚ü®p.map _ hf, rfl‚ü©

lemma height_mono {a b : Œ±} (h : a ‚â§ b) : height a ‚â§ height b :=
krull_dim_le_of_strict_mono (Œª x, ‚ü®x, le_trans x.2 h‚ü©) $ Œª _ _ h, h

lemma coheight_antitone {a b : Œ±} (h : a ‚â§ b) : coheight b ‚â§ coheight a :=
supr_le $ Œª p, le_Sup ‚ü®‚ü®p.len, (Œª (x : set.Ici b), ‚ü®x, le_trans h x.2‚ü©) ‚àò p, strict_mono.comp 
  (Œª i j h, h) p.strict_mono'‚ü©, rfl‚ü©

lemma krull_dim_le_of_strict_comono_and_surj 
  (f : Œ± ‚Üí Œ≤) (hf : strict_comono f) (hf' : function.surjective f) : krull_dim Œ≤ ‚â§ krull_dim Œ± :=
supr_le $ Œª p, le_Sup ‚ü®p.comap _ hf hf', rfl‚ü©

lemma krull_dim_eq_of_order_iso (f : Œ± ‚âÉo Œ≤) : krull_dim Œ± = krull_dim Œ≤ :=
le_antisymm (krull_dim_le_of_strict_mono f f.strict_mono) (krull_dim_le_of_strict_comono_and_surj f 
  (Œª _ _ h, by convert f.symm.strict_mono h; rw f.symm_apply_apply) f.surjective)

variable (Œ±)

lemma krull_dim_eq_supr_height : krull_dim Œ± = ‚®Ü (a : Œ±), height a :=
le_antisymm (supr_le $ Œª i, le_supr_of_le (i ‚ü®i.len, lt_add_one _‚ü©) $ le_Sup 
  ‚ü®‚ü®_, Œª m, ‚ü®i m, i.strict_mono'.monotone begin 
    rw [show m = ‚ü®m.1, m.2‚ü©, by cases m; refl, fin.mk_le_mk],
    linarith [m.2],
  end‚ü©, i.strict_mono'‚ü©, rfl‚ü©) $ 
supr_le $ Œª a, krull_dim_le_of_strict_mono subtype.val $ Œª _ _ h, h

lemma krull_dim_le_order_dual : krull_dim Œ± ‚â§ krull_dim Œ±·µí·µà :=
supr_le $ Œª i, le_Sup $ ‚ü®i.reverse, rfl‚ü©

lemma krull_dim_order_dual_le : krull_dim Œ±·µí·µà ‚â§ krull_dim Œ± :=
(krull_dim_le_order_dual _).trans $ krull_dim_le_of_strict_mono 
  (order_dual.of_dual ‚àò order_dual.of_dual) $ Œª _ _ h, h 

lemma krull_dim_eq_order_dual : krull_dim Œ± = krull_dim Œ±·µí·µà :=
le_antisymm (krull_dim_le_order_dual _) $ krull_dim_order_dual_le _

end preorder

section partial_order

section height_and_coheight

variables [partial_order Œ±]

lemma height_eq (a : Œ±) : 
  height a = ‚®Ü (p : strict_chain Œ±) (hp : p ‚ü®p.len, lt_add_one _‚ü© = a), p.len := 
le_antisymm (supr_le $ Œª p, le_supr_iff.mpr $ Œª m h, begin 
  by_cases hp : p ‚ü®p.len, lt_add_one _‚ü© = ‚ü®a, le_refl _‚ü©,
  { specialize h ‚ü®p.len, Œª i, p i, Œª _ _ h, p.strict_mono' h‚ü©,
    rwa [supr_pos] at h,
    rwa subtype.ext_iff at hp, },
  { have hp' : p ‚ü®p.len, lt_add_one _‚ü© < ‚ü®a, le_refl _‚ü©,
    { exact lt_of_le_of_ne ((p _).2) hp, },
    let q := p.snoc ‚ü®a, le_refl _‚ü© hp',
    specialize h ‚ü®q.len, Œª i, q i, Œª _ _ h, q.strict_mono' h‚ü©,
    rw [supr_pos] at h,
    work_on_goal 2 { exact subtype.ext_iff_val.mp (p.snoc_last ‚ü®a, le_refl _‚ü© hp'), },
    refine le_trans _ h,
    dsimp,
    erw [with_bot.coe_le_coe],
    norm_cast,
    linarith, },
end) $ supr_le $ Œª p, supr_le $ Œª hp, le_Sup ‚ü®‚ü®_, Œª i, ‚ü®p i, hp ‚ñ∏ p.strict_mono'.monotone begin 
  change i.1 ‚â§ p.len,
  linarith [i.2]
end‚ü©, Œª _ _ h, p.strict_mono' h‚ü©, rfl‚ü©

lemma coheight_eq (a : Œ±) :
  coheight a = ‚®Ü (p : strict_chain Œ±) (hp : p 0 = a), p.len :=
le_antisymm (supr_le $ Œª p, le_supr_iff.mpr $ Œª m h, begin 
  by_cases hp : p 0 = ‚ü®a, le_refl _‚ü©,
  { specialize h ‚ü®p.len, Œª i, p i, Œª _ _ h, p.strict_mono' h‚ü©,
    rwa [supr_pos] at h,
    rwa subtype.ext_iff at hp, },
  { have hp' : (‚ü®a, le_refl _‚ü© : set.Ici a) < p 0,
    { exact lt_of_le_of_ne (p _).2 (ne.symm hp), },
    let q := p.cons ‚ü®a, le_refl _‚ü© hp',
    specialize h ‚ü®q.len, Œª i, q i, Œª _ _ h, q.strict_mono' h‚ü©,
    rw [supr_pos] at h,
    work_on_goal 2 { exact subtype.ext_iff_val.mp (p.cons_zero ‚ü®a, le_refl _‚ü© hp'), },
    refine le_trans _ h,
    dsimp,
    erw [with_bot.coe_le_coe],
    norm_cast,
    linarith },
end) $ supr_le $ Œª p, supr_le $ Œª hp, le_Sup ‚ü®‚ü®_, Œª i, ‚ü®p i, hp ‚ñ∏ p.strict_mono'.monotone begin 
  change 0 ‚â§ i.1,
  norm_num,
end‚ü©, Œª _ _ h, p.strict_mono' h‚ü©, rfl‚ü©

end height_and_coheight

end partial_order

/--
Krull dimension of a topological space is the supremum of length of chains of closed irreducible 
sets.
-/
def topological_krull_dim (T : Type*) [topological_space T] : ‚Ñï¬±‚àû :=
krull_dim { s : set T | is_closed s ‚àß is_irreducible s }


/--
The ring theoretic Krull dimension is the Krull dimension of prime spectrum ordered by inclusion.
-/
def ring_krull_dim (R : Type*) [comm_ring R] : ‚Ñï¬±‚àû :=
krull_dim (prime_spectrum R)


namespace ring_krull_dim

lemma eq_topological_krull_dim (R : Type*) [comm_ring R] :
  ring_krull_dim R = topological_krull_dim (prime_spectrum R) :=
eq.symm $ (krull_dim_eq_order_dual _).trans $ krull_dim_eq_of_order_iso $ order_iso.symm 
{ to_fun := order_dual.to_dual ‚àò Œª p, ‚ü®prime_spectrum.zero_locus p.as_ideal, 
    prime_spectrum.is_closed_zero_locus p.as_ideal, 
    (prime_spectrum.is_irreducible_zero_locus_iff _).mpr $ 
      by simpa only [p.is_prime.radical] using p.is_prime‚ü©,
  inv_fun := (Œª s, ‚ü®prime_spectrum.vanishing_ideal s.1, 
    prime_spectrum.is_irreducible_iff_vanishing_ideal_is_prime.mp s.2.2‚ü© : 
    {s : set (prime_spectrum R) | is_closed s ‚àß is_irreducible s} ‚Üí prime_spectrum R) ‚àò 
    order_dual.of_dual,
  left_inv := Œª p, begin 
    ext1,
    dsimp,
    rw [prime_spectrum.vanishing_ideal_zero_locus_eq_radical, p.is_prime.radical],
  end,
  right_inv := Œª s, begin 
    ext1,
    dsimp only [order_dual.to_dual, order_dual.of_dual, equiv.coe_refl, id, subtype.coe_mk, 
      function.comp_apply],
    rw [prime_spectrum.zero_locus_vanishing_ideal_eq_closure],
    exact s.2.1.closure_eq,
  end,
  map_rel_iff' := begin 
    intros p q, 
    simp only [equiv.coe_fn_mk, order_dual.to_dual_le_to_dual, subtype.mk_le_mk, set.le_eq_subset],
    rw [prime_spectrum.zero_locus_subset_zero_locus_iff, q.is_prime.radical],
    refl,
  end }

/--
If `R ‚ü∂ S` is a surjective ring homomorphism, then `ring_krull_dim S ‚â§ ring_krull_dim R`.
-/
theorem le_of_surj (R S : Type*) [comm_ring R] [comm_ring S] (f : R ‚Üí+* S)
  (hf : function.surjective f) : ring_krull_dim S ‚â§ ring_krull_dim R :=
krull_dim_le_of_strict_mono (prime_spectrum.comap f)
  (monotone.strict_mono_of_injective (Œª _ _ h, ideal.comap_mono h) 
    (prime_spectrum.comap_injective_of_surjective f hf))

/--
If `I` is an ideal of `R`, then `ring_krull_dim (R ‚ß∏ I) ‚â§ ring_krull_dim R`.
-/
theorem le_of_quot (R : Type*) [comm_ring R] (I : prime_spectrum R) :
  ring_krull_dim (R ‚ß∏ I.as_ideal) ‚â§ ring_krull_dim R :=
le_of_surj _ _ (ideal.quotient.mk I.as_ideal) ideal.quotient.mk_surjective

/--
If `R` and `S` are isomorphic, then `krull_dim R = krull_dim S`.
-/
theorem eq_of_ring_equiv (R S : Type*) [comm_ring R] [comm_ring S] (e : R ‚âÉ+* S) :
  ring_krull_dim R = ring_krull_dim S :=
le_antisymm (le_of_surj S R (ring_equiv.symm e)
    (equiv_like.surjective (ring_equiv.symm e)))
      (le_of_surj R S e (equiv_like.surjective e))

instance (F : Type*) [field F] : unique (prime_spectrum F) :=
{ default := ‚ü®‚ä•, ideal.bot_prime‚ü©,
  uniq := Œª p, prime_spectrum.ext _ _ $ ideal.ext $ Œª x, begin
    rw [submodule.mem_bot],
    refine ‚ü®Œª h, _, Œª h, h.symm ‚ñ∏ submodule.zero_mem _‚ü©,
    rwa [p.as_ideal.eq_bot_of_prime, submodule.mem_bot] at h,
  end }

instance (F : Type*) [field F] : order_top (strict_chain (prime_spectrum F)) :=
{ top := default,
  le_top := Œª ‚ü®l, f, h‚ü©, show l ‚â§ 0, from decidable.by_contradiction $ Œª rid, 
    ne_of_gt (@h 0 1 begin 
      simpa only [show (0 : fin (l + 1)) = ‚ü®0, _‚ü©, from rfl, 
        show (1 : fin (l + 1)) = ‚ü®1, lt_add_of_pos_left _ (not_le.mp rid)‚ü©, begin 
          rw [fin.eq_iff_veq, fin.one_val, fin.val_eq_coe, fin.coe_mk, ‚Üê nat.succ_pred_eq_of_pos 
            (not_le.mp rid), nat.one_mod],
        end] using nat.zero_lt_one,
    end) (subsingleton.elim _ _) }

lemma eq_zero_of_field (F : Type*) [field F] : ring_krull_dim F = 0 :=
krull_dim_eq_len_of_order_top (prime_spectrum F)

/--
Any PID that is not a field is finite dimensional with dimension 1
-/
@[simps]
def PID_finite_dimensional (R : Type*) [comm_ring R] [is_principal_ideal_ring R] [is_domain R] 
  (hR : ¬¨ is_field R) :
  order_top (strict_chain (prime_spectrum R)) :=
{ top := 
  { len := 1,
    func := (fin_two_arrow_equiv $ prime_spectrum R).symm ‚ü®‚ü®‚ä•, ideal.bot_prime‚ü©, 
      ‚ü®(ideal.exists_maximal R).some, (ideal.exists_maximal R).some_spec.is_prime‚ü©‚ü©,
    strict_mono' := Œª i j h, 
    begin 
      fin_cases i; fin_cases j;
      try { refine (ne_of_lt h rfl).elim <|> refine (not_lt_of_lt h fin.zero_lt_one).elim },
      simpa only [fin_two_arrow_equiv_symm_apply, matrix.cons_val_zero, matrix.cons_val_one, 
        matrix.head_cons] using ideal.bot_lt_of_maximal _ hR,
      exact (ideal.exists_maximal R).some_spec,
    end },
  le_top := Œª ‚ü®l, f, m‚ü©, show l ‚â§ 1, from decidable.by_contradiction $ Œª rid, begin 
    rw not_le at rid,
    haveI : fact (2 ‚â§ l + 1) := ‚ü®by linarith‚ü©,
    haveI : fact (3 ‚â§ l + 1) := ‚ü®by linarith‚ü©,
    
    let a := submodule.is_principal.generator (f 1).as_ideal,
    let b := submodule.is_principal.generator (f 2).as_ideal,
    have lt1 : ideal.span {a} < ideal.span {b},
    { rw [ideal.span_singleton_generator, ideal.span_singleton_generator],
      refine m (_ : fin.val _ < fin.val _),
      rw [fin.one_val_eq_of_le, fin.two_val_eq_of_le],
      exact one_lt_two, },
    rw ideal.span_singleton_lt_span_singleton at lt1,
    rcases lt1 with ‚ü®h, ‚ü®r, hr1, hr2‚ü©‚ü©,
    have ha : prime a := submodule.is_principal.prime_generator_of_is_prime (f 1).as_ideal _,
    have hb : prime b := submodule.is_principal.prime_generator_of_is_prime (f 2).as_ideal _,
    { obtain ‚ü®x, hx‚ü© := (hb.dvd_prime_iff_associated ha).mp ‚ü®r, hr2‚ü©,
      rw ‚Üêhx at hr2,
      rw ‚Üê mul_left_cancel‚ÇÄ h hr2 at hr1, 
      refine (hr1 x.is_unit).elim },
    { intros h,
      suffices : (0 : fin (l + 1)) < 2,
      { have : (f 0).as_ideal < (f 2).as_ideal := m this,
        rw h at this,
        refine (not_le_of_lt this bot_le).elim },
      change (0 : fin _).1 < (2 : fin _).1,
      rw [fin.val_zero, fin.two_val_eq_of_le],
      exact zero_lt_two, },
    { intros h,
      suffices : (0 : fin (l + 1)) < 1,
      { have : (f 0).as_ideal < (f 1).as_ideal := m this,
        rw h at this,
        refine (not_le_of_lt this bot_le).elim },
      change (0 : fin _).1 < (1 : fin _).1,
      rw [fin.val_zero, fin.one_val_eq_of_le],
      exact zero_lt_one, },
  end }

lemma PID_eq_one_of_not_field (R : Type*) [comm_ring R] [is_principal_ideal_ring R] [is_domain R] 
  (hR : ¬¨ is_field R) :
  ring_krull_dim R = 1 :=
begin 
  rw [ring_krull_dim, @@krull_dim_eq_len_of_order_top _ _ (PID_finite_dimensional _ hR)],
  refl,
end

/--
https://stacks.math.columbia.edu/tag/00KG
-/
lemma eq_sup_height_maximal_ideals (R : Type*) [comm_ring R] :
  ring_krull_dim R = ‚®Ü (p : prime_spectrum R) (hp : p.as_ideal.is_maximal), height p :=
(krull_dim_eq_supr_height _).trans $ le_antisymm (supr_le $ Œª p, begin
  let q : prime_spectrum R := ‚ü®(p.as_ideal.exists_le_maximal p.is_prime.1).some, 
    (p.as_ideal.exists_le_maximal _).some_spec.1.is_prime‚ü©,
  refine le_trans _ (le_Sup ‚ü®q, supr_pos ((p.as_ideal.exists_le_maximal _).some_spec.1)‚ü©),
  exact height_mono (p.as_ideal.exists_le_maximal _).some_spec.2,
end) begin 
  rw [show (‚®Ü (a : prime_spectrum R), height a) = ‚®Ü (a : prime_spectrum R) (h : true), height a, 
    by simp only [csupr_pos]],
  exact supr_le_supr_of_subset (Œª x _, ‚ü®‚ü©),
end

/--
Suppose `I` is a prime ideal of `R`, then there is a canonical map from
`prime_spectrum (localization.at_prime I.as_ideal)` to `set.Iic I`.
-/
def localization_prime_spectrum_comap (R : Type*) [comm_ring R] (I : prime_spectrum R) :
  prime_spectrum (localization.at_prime I.as_ideal) ‚Üí (set.Iic I) :=
  Œª J, ‚ü®‚ü®J.as_ideal.comap (algebra_map R (localization.at_prime I.as_ideal)), ideal.is_prime.comap _‚ü©,
  Œª z hz, @@decidable.by_contradiction (classical.dec _) $ Œª hnz, J.is_prime.ne_top $ eq_top_iff.mpr $
    false.elim $ J.is_prime.1 $ (ideal.eq_top_iff_one _).mpr begin
      rw [show (1 : localization.at_prime I.as_ideal) = localization.mk z 1 * localization.mk 1
        ‚ü®z, hnz‚ü©, from _],
      refine ideal.mul_mem_right _ _ hz,
      rw [localization.mk_mul, mul_one, one_mul, localization.mk_eq_mk', is_localization.eq_mk'_iff_mul_eq,
        one_mul, subtype.coe_mk],
    end‚ü©

end ring_krull_dim
